/* 
  1.box-sizing 설정해줬음
  2. body에 있는 기본 마진 0으로 처리
  3. hero 클래스 설정
  4. .container 설정
  5. .hero__txt 설정
  6. 구글 폰트 html에 넣기(css전에)
  7. 폰트를 body에 적용하기(사이트 전체에서 사용할 수 있도록
  8. body에 폰트사이즈 적용하기(rem)
  9. h1 폰트 적용(rem)
  10. .btn(a태그) 스타일링. 
  - display: inline-block;설정
  - padding은 em으로 설정. 해당 태그의 폰트 사이즈에 비례해서 커지고 작아지게 하기 위해.
  - 이 a태그와 위 <p>태그 사이에 여백이 있지만 .margin-top은 주지 않음. 분명히 미래에 뭔가 더 추가될 거기 떄문에
  - 따라서 <P>에 margin-bottom을 em으로 줌. hero__text처럼 클래스를 만들어 줘도 되지만 여기서는 그냥 p태그로 했음
  - em은 항상 해당 클래스의 폰트를 기준으로 크기를 산정하는데, 여기서는 해당 태그에 설정된 것이 없고 body에 설정된 font-size값을 기준으로 함.

  11. 버튼에 마우스를 올렸을 때의 효과를 줌
    - .btn:hober, .btn:focue {}

  12. .hero 아래에 h1과 p로 문단을 만든 후 그걸 col과 row div로 감싼다. 그리고 그걸 다시 .conatiner로 감싸서 너비와 위치를 감싸준다.
  13. .row를 스타일링 해준다. display: flex해주면 block 속성인.col div가 올라와서 한 줄이 된다. (flex-direction:row가 기본이기 때문이다)
  14. .col을 스타일링 해준다. 내용물이 적어도 쪼그라들지 않도록 width : 100%으로 설정한다.
  15. .row에 gap: 100px을 줘서 .col사이의 간격을 벌린다. 혹은 .col + .col도 사용 가능.
  16. 기존 col값들을 conatiner와 row로 감싸준다.
  17. 이제 위의 헤딩을 바꾸고 싶다면 section 태그를 만들어서 .container를 감싸준다.
    - 칼럼 3개인 곳은 three-col이고 2개인 곳은 two-col이다.
    - 패딩을 넣어 간격을 벌리고 중앙정렬한 뒤 텍스트 색을 바꿔줬다.

  18. <div class="container"><div class="row"></div></div> ==> <div class="container row"> 유틸리티 클래스처럼 변경 
      여기서 row를 d-flex로 명하기도 한다. display:flex의 약자이다.

  19. 이미지를 추가하는 데는 세 가지 방법이 있다.
    - 간단히 <img> 태그를 직접 사용하는 것이다. 이 경우 .row에 align-items:flex-start를 줘서 이미지가 옆의 텍스트의 높이와 맞춰지지 않게 한다.
    - 두 번쨰는 img 태그를 div로 감싸는 것이다. 이 경우 img를 감싸고 있는 div는 글씨의 높이를 기준으로 늘어나지만 그 내부의 이미지는 늘어나있지 않는다.
    - 세 번째는 해당 이미지에 클래스명을 부여해서 alitn-self: flex-start로 설정하는 것이다. self임에 주의하자. 이는 html를 깔끔하게 유지할 수 있게 한다.
  
  20. 플렉스 박스와 칼럼너비(column width and flexbox)
      hero__text에 width: 60%, margin-right: 10%, hero__img에 width:30%을 줘서 100을 딱 맞추고 이미지를 오른쪽 끝으로 밀어낸다.
      그런데 이렇게 퍼센트로 간격을 수동 설정하는 것보다는, row에 justif-contents: space-between을 줘서 끝으로 붙이는 게 좋다.
      그리고 이미지와 높이를 맞추기 위해 h1에 세로 마진을 0으로 설정하고 가로 마진을 auto로 설정

  21. 이미지를 반응형으로 설정하기(Ensuring the image is responsive)
      <img class="hero__img" src...>를 <div class="hero__img">로 감싼다. 그리고 img의 클래스 명을 지운다. 만약 이렇게 되면 img 태그는 더이상 flex의 영향을 받지 않게 된다.
      div로 한 번 감싸졌기 때문이다. 플렉스를 따르지 않기 떄문에 플렉스로 감싸진 틀을 빠져나올 수 도 있다. 화면이 줄어든다고 이미지가 함께 줄어들지도 않는다.
       따라서 img 태그를 사용하는 곳에서는 { max-width: 100% }를 사용하는 것이 좋다. 감싸진 상자 내부에서 100%를 유지하기 때문에, 플렉스 아이템은 아니더라도,
       자신을 감싸고 있는 div가 플렉스 아이템이기 떄문에 사이즈가 함께 줄어든다.


  22. flex challenge 2 때문에 html파일의 구조가 변경되었다.
       <body><div class="hero"> 에서 <body><header class="hero">로 변경되었고,
        
       body 내부에 아래 태그가 추가되었으며, 실제 보여줄 컨텐츠들이 다시 그 안으로 들어가게 되었다. 더욱 시맨틱 하게 되었다.

        <main class="main">
            <section class="primary-content"></section>
            <aside class="sidebar"></aside>
        </main>


  23.section과 aside에 내용을 넣어주고 main 클래스에 container와 row를 붙여줘서 너비를 정해주고 플렉스박스로 만든다.
    또한 비율을 .primay-content와 .sidebar 클래스를 만들어서 width를 퍼센트로 정해준다. 그런데 이게 hero__text, hero__img와 같으므로
    그냥 hero__text, hero__img에 추가해줘도 된다. 그러나 이러면 독립적인 스타일링이 불가하므로 따로 작성한다.

    폰트, 정렬, 배경색을 주고, 패딩을 준다. 

  24. main클래스를 만들어 margin-top: 3em을 주어 위와 떼어준다. section-title클래스를 만들어 스타일링을 한다.

  25. 페이지 최상단에 네비게이션을 만들어주기 위해 <header>를 수정해준다. header에서 클래스를 제거하고 section을 만들어준 뒤 클래스를 부여하고 기존 내용을 감쌌다.
      그 위에는 nav태그를 추가해 주었다.

      <header class="hero">
      <div class="container row">
        <div class="hero__text">
          <h1>Responsive layouts don’t have to be a struggle</h1>

    ==>

        <header>
      <nav class="nav">
        <ul class="nav__list">
          <li class="nav__item"><a href="#" class="nav__link">Home</a></li>
          <li class="nav__item"><a href="#" class="nav__link">About</a></li>
          <li class="nav__item"><a href="#" class="nav__link">Contact</a></li>
          <li class="nav__item"><a href="#" class="nav__link">Sign In</a></li>
          <li class="nav__item">
            <a href="#" class="nav__link nav__link--button">Sign up</a>
          </li>
        </ul>
      </nav>
      <section class="hero">
        <div class="container row">
          <div class="hero__text">
            <h1>Responsive layouts don’t have to be a struggle</h1>

      그리고 nav를 위한 스타일링을 추가해준다 header, nav__item, nav__link 등등

      마지막엔 이 HTML에서 <nav>를 <container>로 감싸서  기존 내용들과 위치, 폭을 맞춰줬다.

  26. 기존 네비게이션은 container 클래스 내부에서 왼쪽 정렬 돼 있었다. 여기서부터는 좌측에 로고도 추가하고, 버튼의 위치를 종류에 맞춰
      중간, 오른쪽으로 변경한다. 먼저 오른쪽으로 붙일 요소를 변경한다.
      
       <li class="nav__item nav__item--push-right"><a href="#" class="nav__link">Sign In</a></li> //여기만 해도 뒤에 있는 것들이 다 밀린다.
        <li class="nav__item"><a href="#" class="nav__link nav__link--button">Sign up</a></li>
      그 다음에 이 클래스를 margin-left: auto하면 오른쪽 정렬된다.

      그러나 실제에서 이 방법은 잘 쓰이지 않는다. 그 보다는 해당 두 버튼을 리스트에서 제거한 뒤 개별 <ul>에 구성한 뒤 스타일링 하는 게 일반적이다.
      후자의 방법으로 한 뒤, nav 클래스에 display:flex와 justify-content: space-between을 준다. 그러면 nav가 감싸고 있는 두 개의 ul이 양쪽으로 정렬된다.

      오른쪽 정렬된 마지막 원소의 끝에 마진이 남는 문제가 있다. 이는 아래 설정 때문에 그렇다.

      .nav__item {
         margin-right: 1em;
      }

      이걸 아래처럼 변경해 줘서 해결한다

      .nav__item + .nav__item {
         margin-left: 1em;
      }

      이렇게 하면 왼쪽에 똑같은 .nav__item이 있는 요소만 선택된다. 즉, 좌측에 형제가 없는 요소는 선택되지 않는다. 그리고 좌측 마진을 준다.
      물론 이렇게 하지 않아도 된다. 개별 요소마다 클래스 명을 부여해서 조절해 줘도 문제 없다.
       
    27. container 아래에 a태그를 넣고 그 아래에 img태그를 넣어준다
    28. nav에 flex-grow와 설정을 넣어줌 (flex-shrink도 알아볼 것)
    29. .nav__list--primary {
          margin: 0 auto;
        }

    30. 랜딩페이지 미디어쿼리 사용하여 반응형 작업
        @media (max-width: 800px) {
          .row {
            display: block;
          }
          .hero__text,
          .hero__img,
          .primary-content,
          .sidebar {
            width: 100%;
          }

          .hero__img {
            margin-top: 2em;
          }

    31. 미디어 쿼리를 사용하기 위해서는 반드시 아래 구문이 html파일에 있어야 한다.
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    32.   19 모바일 토글 만들기 위해 none처리 
    33. .nav--visible {
            display: block;
        }

    34. JS추가
        const navToggle = document.querySelector(".nav-toggle");
        const nav = document.querySelector(".nav");
        navToggle.addEventListener("click", () => {
          nav.classList.toggle("nav--visible");
        });


    35. 수정된 부분

      .nav {
        width: 100%;
      }
      .nav-toggle {
          cursor: pointer;
          border: 0;
          width: 3em;
          height: 3em;
          padding: 0em;
          border-radius: 50%;
          background: #072A2D;
          color: white;
          transition: opacity 250ms ease;
          
          position: absolute;
          left: 0;
      }

      .nav-toggle:focus,
      .nav-toggle:hover {
          opacity: .75;
      }

      .hamburger {
          width: 50%;
          position: relative;
      }

      .hamburger,
      .hamburger::before,
      .hamburger::after {
          display: block;
          margin: 0 auto;
          height: 3px;
          background: white;
      }

      .hamburger::before,
      .hamburger::after {
          content: '';
          width: 100%;
      }

      .hamburger::before {
          transform: translateY(-6px);
      }

      .hamburger::after {
          transform: translateY(3px);
      }


      .nav {
        visibility: hidden;
        height: 0;
        position: absolute;
      }

      .nav--visible {
        visibility: visible;
        height: auto;
        position: relative;
      } 


      .logo {
        height: 30px;
      }

          





















    */

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: "Roboto", sans-serif;
  /* font-size: 21px; rem으로 써주는 데 익숙해지자 */
  font-size: 1.3125rem;
}


img {
  max-width: 100%;
}

h1 {
  font-size: 3rem;
  margin: 0 auto;
}

.section-title {
  color: #87629a;
}


.btn {
  display: inline-block;
  background-color: #38cfd9;
  padding: 0.75em 2em;
  border-radius: 100px;

  text-decoration: none;
  text-transform: uppercase;
  color: #23424a;
  font-weight: 900;
}

.btn:hover,
.btn:focus {
  opacity: 0.75;
}

.container {
  /* border: 2px solid yellow; */
  width: 80%;
  /* max-width값을 주지 않으면 div가 계속 커져서 마치 가운데 정렬하지 않은 것처럼 보이게 된다.
  텍스트는 그대로이고 왼쪽 정렬인데 박스는 계속 커지니까 그렇게 느껴지는 것이다 */
  max-width: 1100px;
  margin: 0 auto;
  /* 만약 margin-left:auto 한다면 페이지가 오른쪽 정렬된다. 왼쪽에만 마진이 적용되기 때문이다. margin-right의 경우는 왼쪽정렬된다. */
}

.row {
  display: flex;
  /* 이렇게 해주면 이 아이템이 flex container가 된다. 이 효과는 자식까지만 적용된다. 손자부터는 적용되지 않는다*/
  /* flex-direction: row; */
  /* align-items: flex-start; */
  /* 얼라인 아이템을 스타트로 주지 않으면 이미지가 옆의 텍스트와 똑같은 높이가 돼 버린다. 하기 싫으면 div로 이미지를 감싸라*/
  /* gap: 100px; 이렇게 말고 .col + .col {margin-left:100px;}을 쓸 수도 있다. */
  justify-content: space-between;
}

.col {
  /* 부모인 .row가 flex container이므로 이게 flex items가 된다. 기본적으로는 최대한 줄어드려는 성질을 가진다. 
  가지고 있는 <p>가 길기 때문에, 즉 3개의 총 길이가 화면80%보다 길기 때문에 100퍼센트가 되려고 한다.
  그런데 만약 p의 내용이 짧아진다면, 하나만 쪼그라 들 것이다. 그게 싫다면 .col의 width를 기본적으로 100%로 설정하면 된다.
  */
  /* background: limegreen; */
  /* margin: 10px; */
  /* 모든 col이 100퍼센트가 되려고 함 */
  width: 100%;
}

.col+.col {
  margin-left: 30px;
}

/* .container {
  border: 3px solid green;
} */

/* nav추가후 스타일링 */

header {
  background-color: #136c72;
  padding: 1em 0;
}

.logo {
  margin-right: 1em;
  /* border: 2px solid yellow; */
}

.hamburger::after {
  transform: translateY(3px);
}


.nav {
  display: flex;
  /* 19. 모바일 토글 만들기 위해 none처리 */
  /* display: none; */
  justify-content: space-between;
  flex-grow: 1;
  flex-shrink: 1;
  align-items: center;

  /*flex-grow는 커짐. shrink :1은 작아지는 것을 허용 */

}

.nav--visible {
  display: block;
}

.nav__list {
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  align-items: center;
  font-size: 0.9rem;
  /* border: 2px solid red; */

}

.nav__list--primary {
  margin: 0 auto;
}

/* .nav__item {
  margin-right: 1em;
} */

.nav__item+.nav__item {
  margin-left: 1em;
}

.nav__item--push-right {
  /* 마진이 왼쪽에만 적용되어서 해당 클래스를 사용하는 것들이 오른쪽 정렬됨 */
  margin-left: auto;
}

.nav__link {
  color: #fff;
  text-decoration: none;
  text-transform: uppercase;
}

.nav__link--button {
  background-color: #fff;
  color: #136c72;
  padding: .25em 1em;
  border-radius: 10em;
}

.nav__link:hover {
  opacity: .75;
}



.hero {
  /* padding: 100px; 이렇게 줘버리면 작은 화면에서의 크게 느껴진다.
  따라서 패딩을 아래처럼 준다. 그러면 양 옆으로 딱 붙어버려서 이상하지만, .container 또는 wrapper 클래스로
  .hero 내부의 태그들을 감싼 뒤 해당 클래스에 스타일링(width, margin, max-width)을 해주면 된다.. */
  padding: 100px 0;
  background-color: #23424a;
  color: #fff;
}

/* 부모, 즉 .container 너비의 50퍼센트 너비만큼만 사용함. body의 너비를 기준으로 할 때  body * 80% * 50%   
    그런데 이런 식으로 하게 되면 나중에 내용이 추가되었을 때 힘들어질 수 있다. (옆에 그림의 들어온다든지)
    따라서 hero__text라는 클래스로 h1과 p를 감싸주자. 이름에 __을 붙인 것은 BEM의 명명법을 따른 것으로서,
    이 컴포넌트가 hero 컴포넌트의 서브 컴포넌트라는 의미이다.
  */
/* .hero p {
 
  width: 50%;
} */

.hero__text {
  width: 62%;
  /* background-color: brown; */
  /* margin-right: 10%; */
  /* 텍스트 옆에 퍼센트 마진을 줘서 이미지를 끝으로 밀어냄. 이 방법보다는 justify-contents를 사용하는 게 좋음*/
}

.hero__img {
  width: 32%;
  align-self: flex-start;
}

.hero p {
  margin-bottom: 3em 0;
}

.main {
  margin-top: 3em;
}

.primary-content {
  /* sidebar에 width를 주지 않으면 이게 더 줄어들 수 있다. 놀라지 말고 sidebar 클래스를 작성해서 width를 작성하자. 그럼 맞춰진다. */
  width: 62%;
}

.sidebar {
  width: 32%;
  padding: 1em;
  text-align: center;
  color: #fff;
  background-color: #136c72;
}

/* 랜딩페이지 반응형 작업 */
@media (max-width: 800px) {

  .nav-toggle {
    display: none;
  }

  .nav {
    display: flex;
  }

  .row {
    display: block;
  }


  .hero__text,
  .hero__img,
  .primary-content,
  .sidebar {
    width: 100%;
  }

  .hero__img {
    margin-top: 2em;
  }
}

/* 

CSS에서 display: inline-block; 속성을 사용하는 이유에 대해 설명.
 display: inline-block; 속성은 요소를 인라인(inline) 레벨에서 블록(block) 레벨의 속성을 갖도록 한다.
  즉, 이 속성을 사용하면 요소는 텍스트와 같은 인라인 요소처럼 다른 요소와 같은 줄에 배치되면서도, 블록 요소처럼 너비와 높이를 지정할 수 있다.

이를 통해 다음과 같은 이점:

배치 유연성: 
요소를 한 줄에 나란히 배치하면서 각 요소의 크기를 조절할 수 있다. 이는 버튼, 메뉴 항목, 아이콘 등을 일렬로 배치할 때 유용하다.

크기 조절: 
블록 요소와 달리 display: inline-block; 속성을 가진 요소는 다른 인라인 요소들과 같은 라인에 있을 수 있으면서도,
width와 height를 사용하여 요소의 크기를 조정할 수 있다.

상하 여백 조절:
margin과 padding을 통해 요소의 상하 여백을 조절할 수 있습니다. 이는 인라인 요소에서는 불가능한 조절이다.

예를 들어, 주어진 CSS 코드에서 .btn 클래스를 사용한 요소는 <a>태그로,
기본적으로 <a> 태그는 display: inline;으로 설정되어 있어서 다른 인라인 요소들과 같은 줄에 표시되지만, 
블록 레벨의 스타일 속성(예: 너비, 높이, 패딩)을 적용할 수 "없"다. 

display: inline-block; 속성 덕분에 텍스트와 같은 줄에 배치되면서도 배경색, 패딩, 테두리 반경 등 블록 요소의 특성을 적용할 수 있다.
또한, :hover와 :focus 상태에서의 효과를 통해 사용자 인터랙션을 시각적으로 표현할 수 있다.

*/